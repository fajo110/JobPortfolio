// **********************************************************
// Assignment0: Syed Abbas
// UTOR user_name: abbass13
// UT Student #: 1000484157
// Author: Syed M Farjad Abbas
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package a0;
import java.text.DecimalFormat;

public class Cfiltering {
  // this is a 2d matrix i.e. user*movie
  private int userMovieMatrix[][];
  // this is a 2d matrix i.e. user*movie
  private float userUserMatrix[][];

  /**
   * Default Constructor.
   */
  public Cfiltering() {
    // this is 2d matrix of size 1*1
    userMovieMatrix = new int[1][1];
    // this is 2d matrix of size 1*1
    userUserMatrix = new float[1][1];
  }
  DecimalFormat dformat = new DecimalFormat("0.0000");
  /*
   * TODO:COMPLETE THIS I.E. APPROPRIATELY CREATE THE userMovieMatrix AND
   * userUserMatrix WITH CORRECT DIMENSIONS.
   */
  /**
   * Constructs an object which contains two 2d matrices, one of size
   * users*movies which will store integer movie ratings and one of size
   * users*users which will store float similarity scores between pairs of
   * users.
   * 
   * @param numberOfUsers Determines size of matrix variables.
   * @param numberOfMovies Determines size of matrix variables.
   */
  public Cfiltering(int numberOfUsers, int numberOfMovies) {
	  userMovieMatrix = new int[numberOfUsers][numberOfMovies];
	  userUserMatrix = new float[numberOfUsers][numberOfUsers];
	  
  }

  /**
   * The purpose of this method is to populate the UserMovieMatrix. As input
   * parameters it takes in a rowNumber, columnNumber and a rating value. The
   * rating value is then inserted in the UserMovieMatrix at the specified
   * rowNumber and the columnNumber.
   * 
   * @param rowNumber The row number of the userMovieMatrix.
   * @param columnNumber The column number of the userMovieMatrix.
   * @param ratingValue The ratingValue to be inserted in the userMovieMatrix
   */
  public void populateUserMovieMatrix(int rowNumber, int columnNumber,
      int ratingValue) {

    userMovieMatrix[rowNumber][columnNumber] = ratingValue;
  }

  /*
   * TODO:COMPLETE THIS YOU ARE FREE TO CHANGE THE FUNCTION SIGNATURE BUT DO NOT
   * CHANGE THE FUNCTION NAME AND DO NOT MAKE THIS FUNCTION STATIC. Add/remove
   * 
   * @param AND
   * 
   * @return as required below.
   */
  /**
   * Determines how similar each pair of users is based on their ratings. This
   * similarity value is represented with with a float value between 0 and 1,
   * where 1 is perfect/identical similarity. Stores these values in the
   * userUserMatrix.
   * 
   * @param COMPLETE THIS IF NEEDED
   * @param COMPLETE THIS IF NEEDED
   * @return COMPLETE THIS IF NEEDED
   */
  public void calculateSimilarityScore()
  {
	  //Nested while loop for iteration
	  //to compare users with each other
	  int User1 = 0;
	  while (User1 < userMovieMatrix.length){
		  User1++;
		  
		  int User2 = 0;
		  while (User2 < userMovieMatrix.length){
			  User2++;
			 float Distance=0;
			 int Movie=0;
			 //Distance formula is applied 
			 //in order to check the similarity score
			 //adds the difference, then squares the movie ratings
			 //lastly, finds the square root, to find the final distance
			 while (Movie < userMovieMatrix[0].length){
				 Movie++; 
				 Distance += Math.sqrt(Math.pow((userMovieMatrix[User1]
						 [Movie] - userMovieMatrix[User2][Movie]), 2));
			 }
			 //Adds 1 and inverse of the distance is taken
			 float SimilarityScore =(float)(1/(Distance)+1);
				 userUserMatrix[User1][User2]=SimilarityScore;
				 
			 
		  }
	  }
  }
  
  //public void distanceCalculated(int User1, int User2){
//	  float Distance = 0;
	//  Distance += Math.sqrt(Math.pow((userMovieMatrix[User1][Movie] -
		//		 userMovieMatrix[User2][Movie]), 2));
  //}

  /*
   * TODO:COMPLETE THIS YOU ARE FREE TO CHANGE THE FUNCTION SIGNATURE BUT DO NOT
   * CHANGE THE FUNCTION NAME AND DO NOT MAKE THIS FUNCTION STATIC
   */
  /**
   * Prints out the similarity scores of the userUserMatrix, with each row and
   * column representing each/single user and the cell position (i,j)
   * representing the similarity score between user i and user j.
   * 
   * @param COMPLETE THIS IF NEEDED
   * @param COMPLETE THIS IF NEEDED
   * @return COMPLETE THIS IF NEEDED
   */

  public void printUserUserMatrix() {
	  //As we import Decimal Format, it changes to four decimal place
	 
	  //compares it with all the users through the while loop
	  int m = 0;
	  while (m < userMovieMatrix.length){
		  m++;
		  //As shown in the guidelines, needs an open bracket
		  //prints all the values based on the similarity
		  System.out.println("[");
		  int n = 0;
		  while (n < userMovieMatrix.length){
			  n++;
			  System.out.printf(dformat.format(userUserMatrix[m][n]+", "));
			  
			  }
		  //once it returns the index, closes it with the closed bracket
		  System.out.printf(dformat.format(userUserMatrix[m]
				  [userUserMatrix.length- 1]));
		  System.out.println("]");
		  
	  }
  }

  /*
   * TODO:COMPLETE THIS YOU ARE FREE TO CHANGE THE FUNCTION SIGNATURE BUT DO NOT
   * CHANGE THE FUNCTION NAME AND DO NOT MAKE THIS FUNCTION STATIC
   */
  /**
   * This function finds and prints the most similar pair of users in the
   * userUserMatrix.
   * 
   * @param COMPLETE THIS IF NEEDED
   * @param COMPLETE THIS IF NEEDED
   * @return COMPLETE THIS IF NEEDED
   */

  public void findAndprintMostSimilarPairOfUsers() {

  }

  /*
   * TODO:COMPLETE THIS YOU ARE FREE TO CHANGE THE FUNCTION SIGNATURE BUT DO NOT
   * CHANGE THE FUNCTION NAME AND DO NOT MAKE THIS FUNCTION STATIC
   */
  /**
   * This function finds and prints the most dissimilar pair of users in the
   * userUserMatrix.
   * 
   * @param COMPLETE THIS IF NEEDED
   * @param COMPLETE THIS IF NEEDED
   * @return COMPLETE THIS IF NEEDED
   */
  public void findAndprintMostDissimilarPairOfUsers() {

  }
}
